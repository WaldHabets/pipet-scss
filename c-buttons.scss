@use "sass:color";
@import "base-a11y";
@import "base-colours";
@import "pt-lib-controls";
@import "pt-lib-transitions";

@mixin button-base() {
    @include a11y();
    @include control-base();
	font-weight: 600;

    label {
        color: inherit;
        display: inline-block;
    }
    svg {
        path {
            fill: currentColor;
        }
    }
    &.--flex {
        display: inline-flex;
        align-items: center;
        gap: $unit-spacing-tiny;
    }
    *:hover {
        cursor: pointer;
    }
    &:disabled {
        box-shadow: none;
        background: rgba(236,239,241,1);
        border-color: rgba(176,190,197,1);
        
        color: rgba(176,190,197,1);
        cursor: no-drop;
        border-width: 1px;
    }
}

@mixin button($color) {
    @include button-base();

    $gradient-end: color.adjust($color, $lightness: +10%);
    $color-elevated: color.adjust($color, $lightness: -5%);
    $gradient-end-elevated: color.adjust($color-elevated, $lightness: +10%);

    background: $gradient-end;
    background: linear-gradient(0deg, $color 35%, $gradient-end 100%);
    border-color: color.adjust($color, $lightness: -17%);

    $bg-lightness: color.lightness($color);
    @debug $bg-lightness;
    @if ($bg-lightness > 50%) {
        color: $pt-l-text;
    }
    @else {
        color: $pt-d-text;
    }
    
    $bg-lightness-elevated: color.lightness($color-elevated);


    @include transition-background();

    &:hover:not(:disabled) {    
        cursor: pointer;
        background: linear-gradient(0deg, $color-elevated 35%, $gradient-end-elevated 100%);
        border-color: color.adjust($color-elevated, $lightness: -17%);
    }
    //@include button-state-hover($hover, $color);

    &:active:not(:disabled) {
        box-shadow: 0 0 4px -1px rgba(0, 0, 0, 0.7) inset;
        background: linear-gradient(0deg, $gradient-end-elevated 35%, $color-elevated 100%);
        border-bottom-width: 1px;
        border-color: color.adjust($color-elevated, $lightness: -17%);
        padding-bottom: 10px;
        &.--compact {
            padding-bottom: 6px;
        }
        svg {
            fill: currentColor;
        }
    }
}

@mixin button-neutral() {
    @include button-base();

    background: var(--pt-button-bg-plain);
    background: var(--pt-button-bg-gradient);
    border-color: var(--pt-control-border);
    color: var(--pt-control-text);

    @include transition-background();

    &:hover:not(:disabled) {
        cursor: pointer;
        background: var(--pt-button-bg-plain-focus);
        background: var(--pt-button-bg-gradient-focus);
        border-color: var(--pt-control-border-focus);
    }

    &:active:not(:disabled) {
        box-shadow: 0 0 4px -1px rgba(0, 0, 0, 0.7) inset;
        background: var(--pt-button-bg-gradient-reverse);
        border-bottom-width: 1px;
        border-color: var(--pt-control-border-focus);
        padding-bottom: 10px;
        svg {
            fill: currentColor;
        }
    }
}

.button {
    @include button-neutral();
    display: inline-block;

    &.--themed {
        @include button($pt-l-theme-primary);
    }
    &.--alert {
        @include button($pt-l-theme-destructive-soft);
    }
    &.--warn {
        @include button($pt-l-theme-warn);
    }
}
.flat-button {
    @include button-base();

    background: var(--pt-flat-control-bg);
    border: none;
    border-radius: 8px;
    box-shadow: none;
    color: var(--pt-text);

    &:hover:not(:disabled) {
        background: var(--pt-flat-control-bg-highlight);
        cursor: pointer;
    }

    &:active:not(:disabled) {
        background: var(--pt-flat-control-bg-pressed);
        cursor: pointer;
    }
}

